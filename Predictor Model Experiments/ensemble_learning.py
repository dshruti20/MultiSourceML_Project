# -*- coding: utf-8 -*-
"""Ensemble Learning.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JfMLoyXFCmCLgeVspEV0U0vOGy2RNzqX
"""
import argparse
# Pandas is used for data manipulation
import pandas as pd
# Read in data and display first 5 rows
features = pd.read_csv('Data/MemoryPred_AllFive_Parameters_processed.csv')
#features.head(5)

parser = argparse.ArgumentParser(description='Ensemble Learning Model Experiments')
parser.add_argument('-m', '--method', help='regression method to choose')
args = parser.parse_args()

print('The shape of our features is:', features.shape)

features.describe()

# Use numpy to convert to arrays
import numpy as np
# Labels are the values we want to predict
labels = np.array(features['peak mem usage'])
# Remove the labels from the features
# axis 1 refers to the columns
features= features.drop('peak mem usage',axis = 1)
# Saving feature names for later use
feature_list = list(features.columns)
# Convert to numpy array
features = np.array(features)

# Using Skicit-learn to split data into training and testing sets
from sklearn.model_selection import train_test_split
# Split the data into training and testing sets
train_features, test_features, train_labels, test_labels = train_test_split(features, labels, test_size = 0.2, random_state = 42)

print('Training Features Shape:', train_features.shape)
print('Training Labels Shape:', train_labels.shape)
print('Testing Features Shape:', test_features.shape)
print('Testing Labels Shape:', test_labels.shape)

"""Random Forest Regressor"""
if args.method == "rfr":
    # Import the model we are using
    from sklearn.ensemble import RandomForestRegressor
    # Instantiate model with 1000 decision trees
    rf = RandomForestRegressor(n_estimators = 1000, random_state = 42)
    # Train the model on training data
    rf.fit(train_features, train_labels)
    print(rf.fit(train_features, train_labels))

    # Use the forest's predict method on the test data
    predictions = rf.predict(test_features)
    # Calculate the absolute errors
    errors = abs(predictions - test_labels)
    # Print out the mean absolute error (mae)
    print('Mean Absolute Error:', round(np.mean(errors), 2), 'MBs')

    # Calculate mean absolute percentage error (MAPE)
    mape = 100 * (errors / test_labels)
    # Calculate and display accuracy
    accuracy = 100 - np.mean(mape)
    print('Accuracy:', round(accuracy, 2), '%.')

"""Gradient Boosting Regressor"""
if args.method == "gbr":
    # Import the model we are using
    from sklearn.ensemble import GradientBoostingRegressor
    # Instantiate model with 1000 decision trees
    gbr = GradientBoostingRegressor()
    # Train the model on training data
    gbr.fit(train_features, train_labels)
    print(gbr.fit(train_features, train_labels))

    # Use the forest's predict method on the test data
    predictions = gbr.predict(test_features)
    # Calculate the absolute errors
    errors = abs(predictions - test_labels)
    # Print out the mean absolute error (mae)
    print('Mean Absolute Error:', round(np.mean(errors), 2), 'MBs')

    # Calculate mean absolute percentage error (MAPE)
    mape = 100 * (errors / test_labels)
    # Calculate and display accuracy
    accuracy = 100 - np.mean(mape)
    print('Accuracy:', round(accuracy, 2), '%.')

"""AdaBoost Regressor"""
if args.method == "abr":
    # Import the model we are using
    from sklearn.ensemble import AdaBoostRegressor
    # Instantiate model with 1000 decision trees
    abr = AdaBoostRegressor()
    # Train the model on training data
    abr.fit(train_features, train_labels)
    print(abr.fit(train_features, train_labels))

    # Use the forest's predict method on the test data
    predictions = abr.predict(test_features)
    # Calculate the absolute errors
    errors = abs(predictions - test_labels)
    # Print out the mean absolute error (mae)
    print('Mean Absolute Error:', round(np.mean(errors), 2), 'MBs')

    # Calculate mean absolute percentage error (MAPE)
    mape = 100 * (errors / test_labels)
    # Calculate and display accuracy
    accuracy = 100 - np.mean(mape)
    print('Accuracy:', round(accuracy, 2), '%.')

"""Voting Regressor"""
if args.method == "vr":
    # Import the model we are using
    from sklearn.ensemble import VotingRegressor
    from sklearn.ensemble import GradientBoostingRegressor
    from sklearn.ensemble import RandomForestRegressor
    gbr = GradientBoostingRegressor()
    rf = RandomForestRegressor(n_estimators=1000, random_state=42)
    rf.fit(train_features, train_labels)
    gbr.fit(train_features, train_labels)
    # Instantiate model with 1000 decision trees
    vr = VotingRegressor([('gbr', gbr), ('rf', rf)])
    # Train the model on training data
    vr.fit(train_features, train_labels)
    print(vr.fit(train_features, train_labels))

    # Use the forest's predict method on the test data
    predictions = vr.predict(test_features)
    # Calculate the absolute errors
    errors = abs(predictions - test_labels)
    # Print out the mean absolute error (mae)
    print('Mean Absolute Error:', round(np.mean(errors), 2), 'MBs')

    # Calculate mean absolute percentage error (MAPE)
    mape = 100 * (errors / test_labels)
    # Calculate and display accuracy
    accuracy = 100 - np.mean(mape)
    print('Accuracy:', round(accuracy, 2), '%.')

# Get numerical feature importances
#importances = list(rf.feature_importances_)
# List of tuples with variable and importance
#feature_importances = [(feature, round(importance, 2)) for feature, importance in zip(feature_list, importances)]
# Sort the feature importances by most important first
#feature_importances = sorted(feature_importances, key = lambda x: x[1], reverse = True)
# Print out the feature and importances 
#[print('Variable: {:20} Importance: {}'.format(*pair)) for pair in feature_importances]